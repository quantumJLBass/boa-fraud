-- database: e:\_GIT\obsidian\BoA timeline\profiles\queries\scrap\db\cache-write.db

-- Use the ▷ button in the top right corner to run the entire file.
BEGIN;

-- Create address_types table
CREATE TABLE IF NOT EXISTS address_types (
    code TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT
);

-- Create role_types table
CREATE TABLE IF NOT EXISTS role_types (
    code TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT
);

-- Create officer_addresses table
CREATE TABLE IF NOT EXISTS officer_addresses (
    officer_id INTEGER REFERENCES officers(id) ON DELETE CASCADE,
    address_id INTEGER REFERENCES addresses(id) ON DELETE CASCADE,
    type TEXT REFERENCES address_types(code) ON DELETE SET NULL,
    start_date DATE,
    end_date DATE,
    PRIMARY KEY (officer_id, address_id)
);

-- Add new columns to company_addresses table if they don't already exist
ALTER TABLE company_addresses 
ADD COLUMN IF NOT EXISTS start_date DATE;

ALTER TABLE company_addresses 
ADD COLUMN IF NOT EXISTS end_date DATE;

-- Add new columns to people_addresses table if they don't already exist
ALTER TABLE people_addresses 
ADD COLUMN IF NOT EXISTS start_date DATE;

ALTER TABLE people_addresses 
ADD COLUMN IF NOT EXISTS end_date DATE;

-- Add new columns to officer_addresses table if they don't already exist
ALTER TABLE officer_addresses 
ADD COLUMN IF NOT EXISTS start_date DATE;

ALTER TABLE officer_addresses 
ADD COLUMN IF NOT EXISTS end_date DATE;

-- Add new columns to company_people table if they don't already exist
ALTER TABLE company_people 
ADD COLUMN IF NOT EXISTS start_date DATE;

ALTER TABLE company_people 
ADD COLUMN IF NOT EXISTS end_date DATE;

ALTER TABLE company_people 
ADD COLUMN IF NOT EXISTS role TEXT REFERENCES role_types(code);

-- Add new columns to person_officers table if they don't already exist
ALTER TABLE person_officers 
ADD COLUMN IF NOT EXISTS start_date DATE;

ALTER TABLE person_officers 
ADD COLUMN IF NOT EXISTS end_date DATE;

ALTER TABLE person_officers 
ADD COLUMN IF NOT EXISTS role TEXT REFERENCES role_types(code);

-- Add new columns to company_officers table if they don't already exist
ALTER TABLE company_officers 
ADD COLUMN IF NOT EXISTS start_date DATE;

ALTER TABLE company_officers 
ADD COLUMN IF NOT EXISTS end_date DATE;

ALTER TABLE company_officers 
ADD COLUMN IF NOT EXISTS role TEXT REFERENCES role_types(code);

COMMIT;


WITH columns_info AS (
    SELECT 
        m.name AS table_name,
        p.cid AS column_id,
        p.name AS column_name,
        p.type AS column_type,
        CASE 
            WHEN p.pk = 1 THEN '✅'
            ELSE '-'
        END AS primary_key,
        CASE 
            WHEN p."notnull" = 1 THEN '✅'
            ELSE '-'
        END AS not_null,
        CASE
            WHEN instr(lower(m.sql), 'unique(' || lower(p.name) || ')') > 0 
              OR instr(lower(m.sql), 'unique (' || lower(p.name) || ')') > 0
              OR instr(lower(m.sql), 'UNIQUE (' || lower(p.name) || ',') > 0
              OR instr(lower(m.sql), ', ' || lower(p.name) || ')') > 0
              OR exists (
                  SELECT 1 
                  FROM pragma_index_list(m.name) idx
                  JOIN pragma_index_info(idx.name) ixinfo
                  WHERE ixinfo.name = p.name AND idx."unique" = 1
              )
            THEN '✅'
            ELSE '-'
        END AS unique_constraint,
        CASE 
            WHEN p.dflt_value IS NULL THEN '-'
            WHEN p.dflt_value = 'NULL' THEN 'NULL'
            ELSE p.dflt_value
        END AS default_value,
        COALESCE(fk."table", '-') AS referenced_table,
        COALESCE(fk."to", '-') AS referenced_column,
        COALESCE(fk."on_delete", '-') AS on_delete_action,
        COALESCE(fk."on_update", '-') AS on_update_action,
        CASE 
            WHEN instr(lower(m.sql), 'check (' || lower(p.name)) > 0 
                 AND instr(substr(m.sql, instr(lower(m.sql), 'check (')), ')') > 0 THEN 
                substr(
                    m.sql, 
                    instr(lower(m.sql), 'check (' || lower(p.name)), 
                    instr(substr(m.sql, instr(lower(m.sql), 'check (' || lower(p.name))), ')') 
                    + instr(lower(m.sql), 'check (' || lower(p.name) || ')')
                )
            ELSE '-'
        END AS check_constraint,
        CASE
            WHEN row_number() OVER (PARTITION BY m.name ORDER BY p.cid) = 1 THEN m.sql
            ELSE '-'
        END AS create_table_query
    FROM 
        sqlite_master AS m
    JOIN 
        pragma_table_info(m.name) AS p
    LEFT JOIN 
        pragma_foreign_key_list(m.name) AS fk 
        ON p.name = fk."from"
    WHERE 
        m.type = 'table'
)
SELECT
    table_name,
    column_name,
    column_type,
    primary_key,
    not_null,
    unique_constraint,
    default_value,
    referenced_table,
    referenced_column,
    on_delete_action,
    on_update_action,
    check_constraint,
    create_table_query
FROM 
    columns_info

UNION ALL

SELECT
    CASE
        WHEN table_name IS NULL THEN '………………………………………………………'
        ELSE table_name || '………………………………………………………………………'
    END AS table_name,
    '………………………………………………………………………' AS column_name,
    '………………………………………………………' AS column_type,
    '…………………………………………………………………' AS primary_key,
    '…………………………………………………………………' AS not_null,
    '…………………………………………………………………' AS unique_constraint,
    '…………………………………………………………………' AS default_value,
    '…………………………………………………………………' AS referenced_table,
    '……………………………………………………………………………………' AS referenced_column,
    '…………………………………………………………………' AS on_delete_action,
    '………………………………………………………………………………………' AS on_update_action,
    '………………………………………………………………………………………………………………………………………………' AS check_constraint,
    '…………………………………………………………………………………………………………………………………………………………' AS create_table_query
FROM (
    SELECT DISTINCT table_name 
    FROM columns_info
) AS t
ORDER BY 
    table_name,
    column_name;










WITH columns_info AS (
    SELECT 
        m.name AS table_name,
        p.cid AS column_id,
        p.name AS column_name,
        p.type AS column_type,
        p.pk AS primary_key,
        p."notnull" AS not_null,
        p.dflt_value AS default_value,
        CASE 
            WHEN p.name = fk."from" THEN fk."table"
            ELSE NULL
        END AS referenced_table,
        fk."to" AS referenced_column,
        fk."on_delete" AS on_delete_action,
        fk."on_update" AS on_update_action,
        -- Extract the CHECK constraint associated with the column
        CASE 
            -- WHEN instr(lower(m.sql), 'check (' || lower(p.name) || ')') > 0 THEN 
            --     substr(
            --         m.sql, 
            --         instr(lower(m.sql), 'check (' || lower(p.name)), 
            --         instr(lower(m.sql), ')', instr(lower(m.sql), 'check (' || lower(p.name))) - instr(lower(m.sql), 'check (' || lower(p.name)) + 1
            --     )
            WHEN instr(lower(m.sql), 'check (' || lower(p.name)) > 0 
                 AND instr(substr(m.sql, instr(lower(m.sql), 'check (')), ')') > 0 THEN 
                substr(
                    m.sql, 
                    instr(lower(m.sql), 'check (' || lower(p.name)), 
                    instr(substr(m.sql, instr(lower(m.sql), 'check (' || lower(p.name))), ')') 
                    + instr(lower(m.sql), 'check (' || lower(p.name) || ')')
                )

            ELSE NULL
        END AS check_constraint
    FROM 
        sqlite_master AS m
    JOIN 
        pragma_table_info(m.name) AS p
    LEFT JOIN 
        pragma_foreign_key_list(m.name) AS fk 
        ON p.name = fk."from"
    WHERE 
        m.type = 'table'
)
SELECT
    table_name,
    column_name,
    column_type,
    primary_key,
    not_null,
    default_value,
    referenced_table,
    referenced_column,
    on_delete_action,
    on_update_action,
    check_constraint
FROM 
    columns_info
ORDER BY 
    table_name, 
    column_id;




























SELECT normalized_address, COUNT(*)
FROM addresses
GROUP BY normalized_address
HAVING COUNT(*) > 1;

SELECT 
    SUBSTR(html_content, 
           INSTR(html_content, 'trading') - 105, 
           105 + LENGTH('trading') + 95) AS snippet
FROM 
    url_catalog
WHERE 
    html_content LIKE '%trading%';


BEGIN;

-- Create address_types table
CREATE TABLE IF NOT EXISTS address_types (
    code TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT
);

-- Create role_types table
CREATE TABLE IF NOT EXISTS role_types (
    code TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT
);

-- Create officer_addresses table
CREATE TABLE IF NOT EXISTS officer_addresses (
    officer_id INTEGER REFERENCES officers(id) ON DELETE CASCADE,
    address_id INTEGER REFERENCES addresses(id) ON DELETE CASCADE,
    type TEXT REFERENCES address_types(code) ON DELETE SET NULL,
    start_date DATE,
    end_date DATE,
    PRIMARY KEY (officer_id, address_id)
);

-- Add missing columns to company_addresses table
ALTER TABLE company_addresses 
ADD COLUMN type TEXT REFERENCES address_types(code);

ALTER TABLE company_addresses 
ADD COLUMN start_date DATE;

ALTER TABLE company_addresses 
ADD COLUMN end_date DATE;

-- Add missing columns to people_addresses table
ALTER TABLE people_addresses 
ADD COLUMN type TEXT REFERENCES address_types(code);

ALTER TABLE people_addresses 
ADD COLUMN start_date DATE;

ALTER TABLE people_addresses 
ADD COLUMN end_date DATE;

-- Add missing columns to company_people table
ALTER TABLE company_people 
ADD COLUMN role TEXT REFERENCES role_types(code);

ALTER TABLE company_people 
ADD COLUMN start_date DATE;

ALTER TABLE company_people 
ADD COLUMN end_date DATE;

-- Add missing columns to person_officers table
ALTER TABLE person_officers 
ADD COLUMN role TEXT REFERENCES role_types(code);

ALTER TABLE person_officers 
ADD COLUMN start_date DATE;

ALTER TABLE person_officers 
ADD COLUMN end_date DATE;

-- Add missing columns to company_officers table
ALTER TABLE company_officers 
ADD COLUMN role TEXT REFERENCES role_types(code);

ALTER TABLE company_officers 
ADD COLUMN start_date DATE;

ALTER TABLE company_officers 
ADD COLUMN end_date DATE;

-- Insert initial data into address_types table
INSERT OR IGNORE INTO address_types (code, name, description) VALUES
('billing', 'Billing Address', 'Address used for billing purposes'),
('shipping', 'Shipping Address', 'Address used for shipping purposes'),
('registered', 'Registered Address', 'Registered office address'),
('mailing', 'Mailing Address', 'Address used for mailing correspondence'),
('office', 'Office Address', 'Main office address'),
('home', 'Home Address', 'Residential address'),
('business', 'Business Address', 'Address used for business purposes'),
('legal', 'Legal Address', 'Address for legal correspondence'),
('headquarters', 'Headquarters', 'Main headquarters address'),
('branch', 'Branch Address', 'Address for branch offices'),
('agent', 'Agent Address', 'Address of the registered agent'),
('alternate', 'Alternate Address', 'Alternate address for specific purposes');

-- Insert initial data into role_types table
INSERT OR IGNORE INTO role_types (code, name, description) VALUES
('ceo', 'Chief Executive Officer', 'Top executive responsible for overall management'),
('cfo', 'Chief Financial Officer', 'Top executive responsible for financial operations'),
('director', 'Director', 'Member of the board of directors'),
('manager', 'Manager', 'Individual responsible for managing the company's operations'),
('registered_agent', 'Registered Agent', 'Agent responsible for receiving legal documents'),
('president', 'President', 'Top executive in charge of the company's operations'),
('secretary', 'Secretary', 'Officer responsible for administrative tasks'),
('treasurer', 'Treasurer', 'Officer responsible for financial management'),
('partner', 'Partner', 'Co-owner of the company'),
('general_partner', 'General Partner', 'Partner with full liability in a partnership'),
('limited_partner', 'Limited Partner', 'Partner with limited liability'),
('member', 'Member', 'Owner in an LLC');

COMMIT;

INSERT OR IGNORE INTO role_types (code, name, description) VALUES
('assistant_secretary', 'Assistant Secretary', 'Officer responsible for assisting the Secretary with administrative tasks'),
('sole_member', 'Sole Member', 'The only member in an LLC, with ownership and control responsibilities'),
('shareholder', 'Shareholder', 'Individual or entity owning shares in a company'),
('vice_president', 'Vice President', 'Executive responsible for assisting the President and overseeing specific operations'),
('principal_executive_office', 'Principal Executive Office', 'The primary executive office responsible for overall management'),
('general_manager', 'General Manager', 'Manager responsible for overseeing daily operations at a high level'),
('managing_member', 'Managing Member', 'Member responsible for managing the operations of an LLC');
