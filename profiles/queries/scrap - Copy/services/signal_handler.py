# signal_handler.py
import signal
import sys
from typing import Any
from loguru import logger
import gs
from settings import *
from utils import terminate_driver, terminate_vpn

def signal_handler(
    sig: int,
   frame: Any
) -> None:
    """
    Handles termination signals (SIGINT, SIGTERM, SIGABRT, SIGBREAK) and performs cleanup
    by terminating the WebDriver and VPN processes, logging the termination, and exiting the program.

    Args:
        sig (int): The signal number.
        frame (Any): The current stack frame.

    Returns:
        None
    """
    if gs.terminate_in_progress:
        logger.info(f"{i()}🖐️📛 Signal received but termination already in progress. Ignoring...")
        return

    gs.terminate_in_progress = True
    logger.info(f"{i()}🛑 Signal received: cleaning up resources and exiting...")
    terminate_driver()
    terminate_vpn()
    sys.exit(0)

def setup_signal_handling() -> None:
    """
    Sets up signal handlers for termination signals (SIGINT, SIGTERM, SIGABRT, SIGBREAK).

    This function sets up signal handlers for the following signals:
    - SIGINT: Interrupt signal, typically generated by pressing Ctrl+C in the terminal.
    - SIGTERM: Termination signal, typically generated by the operating system to request the program to terminate.
    - SIGABRT: Abort signal, typically generated by the program itself to indicate an unrecoverable error.
    - SIGBREAK: Break signal, typically generated by pressing Ctrl+Break in the terminal.

    When a termination signal is received, the `signal_handler` function is called to perform cleanup,
    terminate the WebDriver and VPN processes, log the termination, and exit the program.

    This function does not take any parameters and does not return anything.
    """
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGABRT, signal_handler)
    signal.signal(signal.SIGBREAK, signal_handler)
    # signal.signal(signal.SIGKILL, signal_handler)
    # signal.signal(signal.CTRL_C_EVENT, signal_handler)
    # signal.signal(signal.CTRL_BREAK_EVENT, signal_handler)
    # signal.signal(signal.SIGSTOP, signal_handler)

